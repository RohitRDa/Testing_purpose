Sure, here are solutions to the three tasks you mentioned using basic Python constructs and without relying on inbuilt list methods like append or extend.

Task 1: Find the Highest and Second Highest Numbers in a List
Logic
Initialize two variables, highest and second_highest, with None.
Iterate through the list and update highest and second_highest based on the conditions.
Code
python
Copy code
def find_highest_and_second_highest(numbers):
    if not numbers or len(numbers) < 2:
        return None, None

    highest = second_highest = None

    for number in numbers:
        if highest is None or number > highest:
            second_highest = highest
            highest = number
        elif second_highest is None or (number > second_highest and number != highest):
            second_highest = number

    return highest, second_highest

# Example usage:
numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]
highest, second_highest = find_highest_and_second_highest(numbers)
print(f"Highest: {highest}, Second Highest: {second_highest}")
Task 2: Find Common Elements Between Two Lists
Logic
Use a set to store unique elements of the first list.
Iterate through the second list and check for common elements using the set.
Code
python
Copy code
def find_common_elements(list1, list2):
    common_elements = []

    set1 = {element for element in list1}

    for element in list2:
        if element in set1 and element not in common_elements:
            common_elements.append(element)

    return common_elements

# Example usage:
list1 = [1, 2, 3, 4, 5]
list2 = [4, 5, 6, 7, 8]
common_elements = find_common_elements(list1, list2)
print(f"Common Elements: {common_elements}")
Task 3: Remove Duplicates from a List
Logic
Use a set to keep track of seen elements.
Iterate through the list and add elements to the result only if they haven't been seen before.
Code
python
Copy code
def remove_duplicates(input_list):
    seen = set()
    result = []

    for element in input_list:
        if element not in seen:
            seen.add(element)
            result.append(element)

    return result

# Example usage:
input_list = [1, 2, 2, 3, 4, 4, 5]
unique_list = remove_duplicates(input_list)
print(f"List after removing duplicates: {unique_list}")
Summary
These examples demonstrate how to handle common list operations without relying on inbuilt methods like append, extend, set, etc., and by using basic constructs like loops and conditionals.

Finding the highest and second highest numbers in a list: Iterate through the list while keeping track of the highest and second-highest values.
Finding common elements between two lists: Use a set to track elements of one list and compare against the other list.
Removing duplicates from a list: Use a set to track seen elements and construct a new list without duplicates.



aslo add strating and end elemt in list 
also add elemeent in middle of the list 
ChatGPT
Sure! Here are the solutions for the additional tasks of adding elements to the start, end, and middle of a list without using in-built list methods like append or insert.

Adding Elements to the Start of a List
Logic
Create a new list with the new element.
Extend this new list with the elements of the original list.
Code
python
Copy code
def add_to_start(original_list, new_element):
    new_list = [new_element]
    for element in original_list:
        new_list += [element]
    return new_list

# Example usage:
original_list = [2, 3, 4]
new_element = 1
new_list = add_to_start(original_list, new_element)
print(f"List after adding {new_element} to start: {new_list}")
Adding Elements to the End of a List
Logic
Create a new list that starts with the elements of the original list.
Extend this new list with the new element.
Code
python
Copy code
def add_to_end(original_list, new_element):
    new_list = []
    for element in original_list:
        new_list += [element]
    new_list += [new_element]
    return new_list

# Example usage:
original_list = [1, 2, 3]
new_element = 4
new_list = add_to_end(original_list, new_element)
print(f"List after adding {new_element} to end: {new_list}")
Adding Elements to the Middle of a List
Logic
Find the middle index of the list.
Create two new lists: one with elements before the middle index and one with elements after.
Combine the three parts (before, new element, after) into a new list.
Code
python
Copy code
def add_to_middle(original_list, new_element):
    length = len(original_list)
    middle_index = length // 2
    new_list = []

    for i in range(middle_index):
        new_list += [original_list[i]]

    new_list += [new_element]

    for i in range(middle_index, length):
        new_list += [original_list[i]]

    return new_list

# Example usage:
original_list = [1, 2, 4, 5]
new_element = 3
new_list = add_to_middle(original_list, new_element)
print(f"List after adding {new_element} to middle: {new_list}")
Summary
These examples demonstrate how to manually add elements to the start, end, and middle of a list by creating new lists and combining elements without using in-built methods like append or insert.

Adding an element to the start: Create a new list starting with the new element and followed by the original list elements.
Adding an element to the end: Create a new list with the original list elements followed by the new element.
Adding an element to the middle: Determine the middle index, then create a new list with elements before the middle, add the new element, and finally add the remaining elements.
These approaches maintain the integrity of the original list while achieving the desired modifications.

////////////////////////////////////////////////without * //////////////////////////////////////////////////////////////////////////////

def multiply_without_operator(a, b):
    # Initialize the result to 0
    result = 0
    
    # Handle negative numbers
    is_negative = (a < 0) != (b < 0)
    a, b = abs(a), abs(b)
    
    # Add 'a' to the result 'b' times
    for _ in range(b):
        result += a
    
    # If the result should be negative, negate it
    if is_negative:
        result = -result
    
    return result

# Example usage:
a = 5
b = 3
print("Result:", multiply_without_operator(a, b))  # Output: 15

a = -5
b = 3
print("Result:", multiply_without_operator(a, b))  # Output: -15

a = 5
b = -3
print("Result:", multiply_without_operator(a, b))  # Output: -15

a = -5
b = -3
print("Result:", multiply_without_operator(a, b))  # Output: 15

